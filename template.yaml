AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TakeNotes serverless web application
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 60
    Tracing: Active
    MemorySize: 1024
    Tags:
      Application: serverless-web-app
  Api:
    Auth:
      UsagePlan:
        UsagePlanName: DailyUsagePlan
        CreateUsagePlan: PER_API
        Description: This will limit 5000 executions per day and throttle executions on 10% of that.
        Quota:
          Limit: 5000
          Period: DAY
        Throttle:
          BurstLimit: 100
          RateLimit: 50
Parameters:
  VersionParam:
    Type: String
    Default: v1
  StageNameParam:
    Type: String
    Default: dev
  CognitoDomainName:
    Type: String
    Default: mytodoappdemo
Resources:
  TodoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: TodoUsers
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: true
  TodoUserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref TodoUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      CallbackURLs:
        - http://localhost:3000
        - http://localhost:8080
        - https://localhost
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - phone
        - email
        - openid
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
  TodoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join
        - '-'
        - - !Ref CognitoDomainName
          - !Ref AWS::StackName
      UserPoolId: !Ref TodoUserPool
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - '-'
        - - users-table
          - !Ref AWS::StackName
      KeySchema:
        - AttributeName: cognito-username
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: cognito-username
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
  TodoApi:
    Type: AWS::Serverless::Api
    MethodSettings:
      DataTraceEnabled: true
      MetricsEnabled: true
      HttpMethod: '*'
      ResourcePath: !Sub ${VersionParam}/*
      LoggingLevel: INFO
    AccessLogSetting:
      DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}
      Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'
    Properties:
      Name: TodoApi
      StageName: !Ref StageNameParam
      TracingEnabled: true
      Cors:
        AllowOrigin: '''*'''
        AllowMethods: '''OPTIONS,HEAD,GET,PUT,POST,DELETE'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt TodoUserPool.Arn
  GetTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todo-src/getTodo
      Handler: app.getToDoItem
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
          USE_DYNAMODB_LOCAL: '0'
          DYNAMODB_LOCAL_URI: ''
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /item/{id}
            Method: get
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
  GetAllTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todo-src/getAllTodo
      Handler: app.getAllToDoItem
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
          ENDPOINT_OVERRIDE: ''
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /item
            Method: get
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
  CompleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todo-src/completeTodo/
      Handler: app.completeToDoItem
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
          ENDPOINT_OVERRIDE: ''
      Events:
        CompleteItem:
          Type: Api
          Properties:
            Path: /item/{id}/done
            Method: post
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
  AddTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todo-src/addTodo/
      Handler: app.addToDoItem
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
          ENDPOINT_OVERRIDE: ''
      Events:
        PutItem:
          Type: Api
          Properties:
            Path: /item
            Method: POST
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todo-src/updateTodo/
      Handler: app.updateToDoItem
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
      Events:
        UpdateItem:
          Type: Api
          Properties:
            Path: /item/{id}
            Method: PUT
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todo-src/deleteTodo
      Handler: app.deleteToDoItem
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
          ENDPOINT_OVERRIDE: ''
      Events:
        DeleteItem:
          Type: Api
          Properties:
            Path: /item/{id}
            Method: DELETE
            RestApiId: !Ref TodoApi
            Auth:
              Authorizer: CognitoAuthorizer
  ApiGatewayPushToCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Push logs to CloudWatch logs from API Gateway
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-${TodoApi}
      RetentionInDays: 365
Outputs:
  TodoFunctionApi:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/{StageNameParam}
  CognitoID:
    Description: The Cognito UserPool ID
    Value: !Ref TodoUserPool
  CognitoClientID:
    Description: The Cognito UserPool Client ID
    Value: !Ref TodoUserPoolTokenClient
  CognitoDomainName:
    Description: The Cognito Hosted UI Domain Name
    Value: !Join
      - ''
      - - !Ref CognitoDomainName
        - '-'
        - !Ref AWS::StackName
        - .auth.
        - !Ref AWS::Region
        - .amazoncognito.com